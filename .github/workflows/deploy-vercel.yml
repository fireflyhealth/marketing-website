name: Deploy
on:
  workflow_call:
    secrets:
      vercel-token:
        required: true
      github-token:
        required: true
    inputs:
      directory:
        required: true
        type: string
      vercel-project-id:
        required: true
        type: string
      vercel-storybook-project-id:
        required: true
        type: string
      vercel-org-id:
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  # Create a preview deployment on PR pushes (not main or prod)
  deploy-preview:
    name: Preview
    if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/production'
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.vercel.outputs.preview-url }}
    defaults:
      run:
        working-directory: ${{ inputs.directory }}
    steps:
      - uses: actions/checkout@v2
      - uses: amondnet/vercel-action@v20
        id: vercel
        with:
          vercel-project-id: ${{ inputs.vercel-project-id }}
          vercel-org-id: ${{ inputs.vercel-org-id }}
          scope: ${{ inputs.vercel-org-id }}
          vercel-token: ${{ secrets.vercel-token }}
          github-token: ${{ secrets.github-token }}


  deploy-storybook-preview:
    name: Storybook Preview
    if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/production'
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.vercel.outputs.preview-url }}
    defaults:
      run:
        working-directory: ${{ inputs.directory }}
    steps:
      - uses: actions/checkout@v2
      - uses: amondnet/vercel-action@v20
        id: vercel-storybook
        with:
          vercel-project-id: ${{ inputs.vercel-storybook-project-id }}
          vercel-org-id: ${{ inputs.vercel-org-id }}
          scope: ${{ inputs.vercel-org-id }}
          vercel-token: ${{ secrets.vercel-token }}
          github-token: ${{ secrets.github-token }}

  # Create an aliased deployment on pushes to main
  deploy-staging:
    name: Staging
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.directory }}
    steps:
      - uses: actions/checkout@v2
      - uses: amondnet/vercel-action@v20
        with:
          vercel-project-id: ${{ inputs.vercel-project-id }}
          vercel-org-id: ${{ inputs.vercel-org-id }}
          scope: ${{ inputs.vercel-org-id }}
          vercel-token: ${{ secrets.vercel-token }}
          github-token: ${{ secrets.github-token }}
          alias-domains: firefly-staging.vercel.app

  deploy-storybook:
    name: Storybook
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.vercel.outputs.preview-url }}
    defaults:
      run:
        working-directory: ${{ inputs.directory }}
    steps:
      - uses: actions/checkout@v2
      - uses: amondnet/vercel-action@v20
        id: vercel-storybook
        with:
          vercel-project-id: ${{ inputs.vercel-storybook-project-id }}
          vercel-org-id: ${{ inputs.vercel-org-id }}
          scope: ${{ inputs.vercel-org-id }}
          vercel-token: ${{ secrets.vercel-token }}
          github-token: ${{ secrets.github-token }}
          alias-domains: firefly-storybook.vercel.app

  # Create a prod deployment on pushes to production
  deploy-production:
    name: Production
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.directory }}
    steps:
      - uses: actions/checkout@v2
      - uses: amondnet/vercel-action@v20
        with:
          vercel-project-id: ${{ inputs.vercel-project-id }}
          vercel-org-id: ${{ inputs.vercel-org-id }}
          scope: ${{ inputs.vercel-org-id }}
          vercel-token: ${{ secrets.vercel-token }}
          github-token: ${{ secrets.github-token }}
          alias-domains: firefly-health.vercel.app

  audit_with_lighthouse:
    name: Audit with Lighthouse
    runs-on: ubuntu-latest
    needs: [deploy-preview]
    if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/production'
    permissions:
      contents: write
      pull-requests: write
    defaults:
      run:
        working-directory: ${{ inputs.directory }}
    steps:
      - uses: actions/checkout@v3

      - name: Audit preview URL with Lighthouse (mobile)
        id: lighthouse_audit_mobile
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            ${{ needs.deploy-preview.outputs.preview-url }}
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Audit preview URL with Lighthouse (desktop)
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            ${{ needs.deploy-preview.outputs.preview-url }}
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: .github/lighthouse/lighthouse-config.json

      - name: Format Lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const mobileLinks = ${{ steps.lighthouse_audit_mobile.outputs.links }};
            const mobileResult = ${{ steps.lighthouse_audit_mobile.outputs.manifest }}[0].summary;
            const desktopLinks = ${{ steps.lighthouse_audit.outputs.links }};
            const desktopResult = ${{ steps.lighthouse_audit.outputs.manifest }}[0].summary;
            const previewUrl = "${{ needs.deploy-preview.outputs.preview-url }}";
            const formatResult = (res) => Math.round((res * 100));
            const score = res => res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥';
            Object.keys(mobileResult).forEach(key => mobileResult[key] = formatResult(mobileResult[key]));
            Object.keys(desktopResult).forEach(key => desktopResult[key] = formatResult(desktopResult[key]));
            const comment = [
              `## ‚ö°Ô∏è Lighthouse Report`,
              `### Mobile ([view report](${Object.values(mobileLinks)[0]}))`,
              '| Category | Score |',
              '| --- | --- |',
              `| ${score(mobileResult.performance)} Performance | ${mobileResult.performance} |`,
              `| ${score(mobileResult.accessibility)} Accessibility | ${mobileResult.accessibility} |`,
              `| ${score(mobileResult['best-practices'])} Best practices | ${mobileResult['best-practices']} |`,
              `| ${score(mobileResult.seo)} SEO | ${mobileResult.seo} |`,
              ` `,
              `### Desktop ([view report](${Object.values(desktopLinks)[0]}))`,
              '| Category | Score |',
              '| --- | --- |',
              `| ${score(desktopResult.performance)} Performance | ${desktopResult.performance} |`,
              `| ${score(desktopResult.accessibility)} Accessibility | ${desktopResult.accessibility} |`,
              `| ${score(desktopResult['best-practices'])} Best practices | ${desktopResult['best-practices']} |`,
              `| ${score(desktopResult.seo)} SEO | ${desktopResult.seo} |`,
              ` `,
              `*Lighthouse ran on [${previewUrl}](${previewUrl})*`
            ].join('\n');
            core.setOutput("comment", comment);
      - name: Add comment to PR
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            ${{ steps.format_lighthouse_score.outputs.comment }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
          allow-repeats: false # This is the default
